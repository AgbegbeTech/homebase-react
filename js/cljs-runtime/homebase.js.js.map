{"version":3,"sources":["homebase/js.cljs"],"mappings":"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","names":["homebase.js/keywordize-str","s","cljs.core._EQ_","cljs.core.subs","cljs.core.keyword","homebase.js/keywordize","coll","cljs.core.js__GT_clj","clojure.walk/postwalk","homebase.js/js->db-attr-overrides","homebase.js/bool-re","homebase.js/js->bool-key","string","temp__5735__auto__","vec__23975","cljs.core.nth","_","verb","key","cljs.core/re-find","homebase.js/js->key-not-memo","namespace","or__4126__auto__","cljs.core.get","camel-snake-kebab.core/->kebab-case","homebase.js/js->key","cljs.core/memoize","homebase.js/js-tx-fns","var_args","G__23979","homebase.js/js->tx","js/Error","tx","cljs.core/object?","homebase.js.js__GT_tx","vec__23980","f","e","a","v","data","cljs.core/reduce-kv","acc","k","cljs.core/coll?","cljs.core.assoc","homebase.js/js->entity-lookup","lookup","cljs.core/first","homebase.js/str->schema-key","homebase.js/js->schema","schema","cljs.core.reduce","p__23983","vec__23984","nms","nm","p","cljs.core.get_in","cljs.core/assoc-in","homebase.util/paths","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.js/q-entity-array","seq23987","G__23988","cljs.core/next","G__23989","self__4723__auto__","query","conn","args","cljs.core.apply","datascript.core/q","cljs.core.map","p__23990","vec__23991","id","datascript.core/entity","cljs.core/to-array","homebase.js/js->datalog","map__23994","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","find","where","cljs.core.symbol","cljs.core.mapv","p__23996","vec__23997","av","vec__24000","vec__24003","cljs.core/seq","pred","cljs.core.into","homebase.js/js->query","cljs.reader.read_string","homebase.js/js-get","entity","name","G__24006","ks","cljs.core.remove","cljs.core/keys","cljs.core/namespace","datascript.impl.entity/Entity","this","keys","cljs.core/Keyword","cljs.core/get","cljs.core/set?","G__24007","G__24008","G__24009","G__24010","homebase.js/nil->retract","temp__5733__auto__","p__24011","vec__24012","cljs.core.dissoc","homebase.js/humanize-transact-error","error","pred__24015","expr__24016","G__24018","G__24019","G__24020","G__24021","G__24022","G__24023","G__24024","G__24025","homebase.js/transact!","txs","e24026","datascript.core.transact_BANG_","cljs.core.mapcat","cljs.core.comp","homebase.js/humanize-entity-error","pred__24027","expr__24028","G__24030","G__24031","p__4491__auto__","p__24032","vec__24033","nmspc","attr","homebase.js/entity","e24036","G__24037","cljs.core/deref","G__24038","G__24040","homebase.js/example-js-query","homebase.js.example_js_query","nmsp","homebase.js/humanize-q-error","pred__24041","expr__24042","G__24044","G__24045","G__24046","G__24047","G__24048","G__24049","G__24054","G__24055","p__24050","vec__24051","var","p__24056","vec__24057","homebase.js/q","seq24060","G__24061","G__24062","e24063"],"sourcesContent":["(ns homebase.js\n  (:require\n   [homebase.util :as u]\n   [clojure.walk :as walk]\n   [camel-snake-kebab.core :as csk]\n   [datascript.core :as d]\n   [datascript.impl.entity :as de :refer [Entity]]))\n\n(defn keywordize-str [s]\n  (if (and (string? s) (= (subs s 0 1) \":\"))\n    (keyword (subs s 1))\n    s))\n\n(defn keywordize [coll]\n  (->> (js->clj coll)\n       (walk/postwalk keywordize-str)))\n\n(def js->db-attr-overrides\n  {\"id\" :db/id\n   \"identity\" :db/ident\n   \"ident\" :db/ident})\n\n(def bool-re #\"^(is|has|show|hide)(-|_)?(.*)\")\n\n(defn js->bool-key [string]\n  (when-let [[_ verb _ key] (re-find bool-re string)]\n    (if (= \"is\" verb) (str key \"?\") (str verb \"-\" key \"?\"))))\n\n(defn js->key-not-memo [namespace string]\n  (or\n   (get js->db-attr-overrides string)\n   (keyword (csk/->kebab-case namespace)\n            (csk/->kebab-case\n             (or (js->bool-key string)\n                 string)))))\n(def js->key (memoize js->key-not-memo))\n\n(comment\n  (js->key \"ok\" \"watThing\")\n  (js->key \"ok\" \"id\")\n  (js->key \"ok\" \"is_good\"))\n\n(def js-tx-fns\n  {\"add\" :db/add\n   \"retract\" :db/retract\n   \"retractEntity\" :db.fn/retractEntity})\n\n(defn js->tx\n  ([tx]\n   (if (object? tx)\n     (js->tx tx \"db\")\n     (let [[f e a v] tx]\n       [(get js-tx-fns f) e (keywordize a) v])))\n  ([data namespace]\n   (reduce-kv\n    (fn js->tx-reducer [acc k v]\n      (if (coll? v)\n        (js->tx v k)\n        (assoc acc (js->key namespace k) v)))\n    {} (js->clj data))))\n\n(defn js->entity-lookup [lookup]\n  (cond\n    (number? lookup) lookup\n    (object? lookup) (first (js->tx lookup))\n    :else nil))\n\n(comment\n  (js->tx #js {\"user\" {\"id\" -2\n                       \"name\" \"Arpegius\"}})\n  (map js->tx #js [{\"todoFilter\" {\"identity\" \"todoFilters\"\n                                  \"showCompleted\" true\n                                  \"project\" 0}}])\n  (first (js->tx #js {\"identity\" \"wat\"}))\n  (js->entity-lookup 1)\n  (js->entity-lookup #js {\"identity\" \"todoFilters\"}))\n\n(def str->schema-key\n  {\"unique\" :db/unique\n   \"identity\" :db.unique/identity\n   \"type\" :db/valueType\n   \"ref\" :db.type/ref})\n\n(defn js->schema [schema]\n  (let [schema (js->clj schema)]\n    (reduce (fn js->schema-reducer [acc [nms nm k :as p]]\n              (let [v (get str->schema-key (get-in schema p))\n                    k (get str->schema-key k)]\n                (assoc-in acc [(js->key nms nm) k] v)))\n            {} (u/paths schema))))\n\n(comment\n  (=\n   {:project/name #:db{:unique :db.unique/identity}\n    :todo/project #:db{:valueType :db.type/ref, :unique :db.unique/identity}\n    :todo/owner #:db{:valueType :db.type/ref}}\n   (js->schema #js {\"project\" {\"name\" {\"unique\" \"identity\"}}\n                    \"todo\" {\"project\" {\"type\" \"ref\"\n                                       \"unique\" \"identity\"}\n                            \"owner\" {\"type\" \"ref\"}}})))\n\n(defn q-entity-array [query conn & args]\n  (->> (apply d/q query conn args)\n       (map (fn id->entity [[id]] (d/entity conn id)))\n       to-array))\n\n(defn js->datalog [data]\n  (let [{find \"$find\" where \"$where\"} (js->clj data)]\n    {:find [(symbol (str \"?\" find))]\n     :where (mapv\n             (fn build-where-clause [[e av]]\n               (let [[[a v]] (seq av)\n                     pred [(symbol (str \"?\" e))\n                           (keyword e a)]]\n                 (if (= v \"$any\") pred\n                     (into pred [v]))))\n             where)}))\n\n(comment\n  (=\n   '[:find ?project\n     :where [[?project :project/name]]]\n   (js->datalog\n    #js {\"$find\" \"project\"\n         \"$where\" {\"project\" {\"name\" \"$any\"}}})))\n\n(defn js->query [query]\n  (cond\n    ; Assume datalog\n    ; NOTE: this only supports the most basic find clauses\n    ;       E.g. `:find ?e`\n    ;       Not  `:find ?e ...` or `:find ?e .` or `:find ?e ?a ?b`\n    ; TODO: should this support more complex :find queries?\n    (string? query) (cljs.reader/read-string query)\n    ; Assume JSON style query\n    (object? query) (js->datalog query)\n    :else nil))\n\n(defn js-get [entity name]\n  (case name\n    \"id\" (:db/id entity)\n    \"ident\" (:db/ident entity)\n    \"identity\" (:db/ident entity)\n    (let [ks (remove #{:db/id :db/ident} (keys entity))\n          ; This assumes that every entity only has keys of the same namespace once the :db keys are removed\n          nms (namespace (first ks))\n          k (js->key nms name)]\n      (get entity k))))\n\n(extend-type Entity\n  Object\n  (get [this & keys]\n    (reduce\n     (fn [acc key]\n       (let [key (keywordize key)\n             f (if (keyword? key) get js-get)]\n         (cond\n           (set? acc) (f (first acc) (keywordize key))\n           acc (f acc (keywordize key))\n           :else nil)))\n     this keys)))\n\n(defn nil->retract [tx]\n  (if-let [id (:db/id tx)]\n    (map (fn [[k v]]\n           [(if (nil? v) :db/retract :db/add) id k v])\n         (dissoc tx :db/id))\n    [tx]))\n\n\n(defn humanize-transact-error [error]\n  (condp re-find (.-message error)\n    #\"\\[object Object\\] is not ISeqable\" \n    \"Expected an array of transactions. \n\\nFor example:  transact([\n                {todo: {name: 1}}, \n                {todo: {name: 2}}\n              ])\n\"\n    \n    #\"Unknown operation at \\[nil nil nil nil\\], expected\"\n    \"Expected 'retractEntity'. \n\\nFor example:  transact([['retractEntity', id]])\n\"\n    \n    #\"Can't use tempid in '\\[:db\\.fn/retractEntity\"\n    \"Expected a numerical id. \n\\nFor example:  transact([['retractEntity', 123]])\n\"\n    \n    #\"Expected number or lookup ref for entity id, got nil\"\n    \"Expected a numerical id. \n\\nFor example:  transact([['retractEntity', 123]])\n\"\n    (.-message error)))\n\n(defn transact! [conn txs]\n  (try \n    (d/transact! conn (mapcat (comp nil->retract js->tx) txs))\n    (catch js/Error e \n      (throw (js/Error. (humanize-transact-error e))))))\n(comment\n  ; Valid tx\n  (transact! (d/create-conn) (clj->js [{\"wat\" {\"thing\" 1}} \n                                       [\"retractEntity\" 1]]))\n  ; Invalid txs\n  (transact! (d/create-conn) (clj->js {}))\n  (transact! (d/create-conn) (clj->js [[]]))\n  (transact! (d/create-conn) (clj->js [[\"notAThing\"]]))\n  (transact! (d/create-conn) (clj->js [[\"retractEntity\" \"wat\"]]))\n  (transact! (d/create-conn) (clj->js [[\"retractEntity\"]])))\n\n\n(defn humanize-entity-error [error]\n  (condp re-find (.-message error)\n    #\"Lookup ref attribute should be marked as :db/unique: \\[:([\\w-]+)/([\\w-]+) ((?!\\]).+)\\]\"\n    :>> (fn [[_ nmspc attr v]]\n          (str \"The `\" nmspc \".\" attr \"` attribute should be marked as unique if you want to lookup entities by it.\"\n               \"\\n\\nAdd this to your config:  { schema: { \" nmspc \": { \" attr \": { unique: 'identity' }}}\\n\"))\n    (.-message error)))\n\n(defn entity [conn lookup]\n  (try\n    (d/entity @conn (js->entity-lookup lookup))\n    (catch js/Error e\n      (throw (js/Error. (humanize-entity-error e))))))\n(comment\n  ; Valid entity\n  (entity (d/create-conn) (clj->js 1))\n  ; Potentially invalid\n  (entity (d/create-conn) (clj->js {\"item\" {\"number\" 1}})))\n\n\n(defn example-js-query\n  ([] (example-js-query \"item\"))\n  ([nmsp] (str \"\\n\nFor example:  query({ \n                $find: '\" nmsp \"',\n                $where: { \" nmsp \": { name: '$any' }}\n              })\n\")))\n\n(defn humanize-q-error [error]\n  (condp re-find (.-message error)\n    #\"Query should be a vector or a map\"\n    (str \"Expected query to be in the form of an object or datalog string.\"\n         (example-js-query))\n    \n    #\"Query for unknown vars: \\[\\?\\]\"\n    (str \"Expected query to have a $find and a $where clause.\"\n         (example-js-query))\n    \n    ; TODO: revist when datalog strings are better supported since this error is directed at JS object queries only.\n    #\"Query for unknown vars: \\[\\?((?!\\]).+)\\]\"\n    :>> (fn [[_ var]]\n          (str \"Expected to see '\" var \"' in both the $find and $where clauses.\"\n               (example-js-query var)))\n    \n    #\"((?! is not ISeqable).+) is not ISeqable\"\n    :>> (fn [[_ v]]\n          (str \"Expected $where clause to be a nested object, not \" v \".\"\n               (example-js-query)))\n    (.-message error)))\n\n(defn q [query conn & args]\n  (try \n    (apply q-entity-array (js->query query) @conn (keywordize args))\n    (catch js/Error e \n      (throw (js/Error. (humanize-q-error e))))))\n(comment\n  ; Valid queries\n  (q (clj->js {\"$find\" \"item\"\n               \"$where\" {\"item\" {\"name\" \"$any\"}}})\n     (d/create-conn))\n  (q (clj->js \"[:find ?e :where [?e :item/name]]\") (d/create-conn))\n  ; Invalid queries\n  (q (clj->js 1) (d/create-conn))\n  (q (clj->js \"\") (d/create-conn))\n  (q (clj->js []) (d/create-conn))\n  (q (clj->js {}) (d/create-conn))\n  (q (clj->js {\"item\" {\"number\" 1}}) (d/create-conn))\n  (q (clj->js {\"$find\" \"todo\"}) (d/create-conn))\n  (q (clj->js {\"$find\" \"item\"\n               \"$where\" {\"todo\" {\"name\" \"wat\"}}}) (d/create-conn))\n  (q (clj->js {\"$find\" \"todo\"\n               \"$where\" {\"todo\" 1}}) (d/create-conn))\n  (q (clj->js \"[]\") (d/create-conn))\n  (q (clj->js \"{}\") (d/create-conn))\n  )"]}