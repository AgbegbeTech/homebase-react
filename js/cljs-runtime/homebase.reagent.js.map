{"version":3,"sources":["homebase/reagent.cljs"],"mappings":"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","names":["homebase.reagent/conn-from-db","db","reagent.core.atom","cljs.core.atom","var_args","G__23502","homebase.reagent/conn-from-datoms","js/Error","datoms","datascript.core/init-db","schema","G__23505","homebase.reagent/create-conn","datascript.core/empty-db","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.reagent/new-db-conn","p__23524","map__23525","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq23518","G__23519","cljs.core/first","cljs.core/next","self__4723__auto__","txs","conn","homebase.reagent.create_conn","datascript.core.transact_BANG_","homebase.reagent/q","seq23527","G__23528","G__23529","query","vars","G__23530","G__23531","datascript.core/entity","cljs.core/deref","datascript.core/q","homebase.reagent/transact!"],"sourcesContent":["(ns homebase.reagent\n  (:require \n   [reagent.core :as r]\n   [datascript.core :as d]))\n\n(defn conn-from-db\n  \"Monkeypatch conn-from-db in datascript to use an r/atom https://github.com/tonsky/datascript/blob/master/src/datascript/core.cljc#L411\"\n  [db]\n  (r/atom db :meta {:listeners (atom {})}))\n\n(defn conn-from-datoms\n  \"Creates an empty DB and a mutable reference to it. See [[create-conn]].\"\n  ([datoms]        (conn-from-db (d/init-db datoms)))\n  ([datoms schema] (conn-from-db (d/init-db datoms schema))))\n\n(defn create-conn\n  \"Creates a mutable reference (a \u201cconnection\u201d) to an empty immutable database.\n   Connections are lightweight in-memory structures (~atoms) with direct support of transaction listeners ([[listen!]], [[unlisten!]]) and other handy DataScript APIs ([[transact!]], [[reset-conn!]], [[db]]).\n   To access underlying immutable DB value, deref: `@conn`.\"\n  ([]       (conn-from-db (d/empty-db)))\n  ([schema] (conn-from-db (d/empty-db schema))))\n\n\n(defn new-db-conn [txs & {:keys [schema]}]\n  (let [conn (create-conn schema)]\n    (d/transact! conn txs)\n    conn))\n\n(defn q [query conn & vars]\n  (cond\n    (number? query) (d/entity (deref conn) query)\n    :else (apply d/q query (deref conn) vars)))\n\n(defn transact! [conn txs]\n  (d/transact! conn txs))\n"]}