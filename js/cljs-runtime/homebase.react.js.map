{"version":3,"sources":["homebase/react.cljs"],"mappings":"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","names":["homebase.react/try-hook","hook-name","f","e24072","js/Error","e","goog.object/get","G__24074","cljs.core/re-find","cljs.core/re-pattern","cljs.core/second","clojure.string/trim","js/homebase","js/homebase.react","js/homebase.react.homebase-context","homebase.react/homebase-context","js/module$node_modules$react$index.createContext","homebase.react/base-schema","homebase.react/HomebaseProvider","props","conn","datascript.core.create_conn","temp__5733__auto__","schema","goog.object/getValueByKeys","cljs.core.merge","homebase.js/js->schema","temp__5735__auto__","tx","homebase.js/transact!","js/module$node_modules$react$index.createElement","homebase.react/useEntity","lookup","vec__24076","cljs.core.nth","js/module$node_modules$react$index.useContext","run-lookup","homebase.js/entity","result","setResult","js/module$node_modules$react$index.useState","js/module$node_modules$react$index.useEffect","key","cljs.core.rand","datascript.core.listen_BANG_","G__24082","datascript.core/unlisten!","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.react/useQuery","seq24083","G__24084","cljs.core/first","cljs.core/next","self__4723__auto__","query","args","vec__24085","run-query","cljs.core.apply","homebase.js/q","G__24088","homebase.react/useTransact","transact","txs"],"sourcesContent":["(ns homebase.react\n  (:require\n   [\"react\" :as react]\n   [clojure.string]\n   [homebase.js :as hbjs]\n   [datascript.core :as d]))\n\n(defn try-hook [hook-name f]\n  (try (f)\n    (catch js/Error e\n      (throw\n       (js/Error\n        (str (goog.object/get e \"message\") \"\\n\"\n             (some->> (goog.object/get e \"stack\")\n                      (re-find (re-pattern (str hook-name \".*\\\\n(.*)\\\\n?\")))\n                      (second)\n                      (clojure.string/trim))))))))\n\n(defonce ^:export homebase-context (react/createContext))\n\n(def base-schema\n  {:db/ident {:db/unique :db.unique/identity}})\n\n(defn ^:export HomebaseProvider [props]\n  (let [conn (d/create-conn (if-let [schema (goog.object/getValueByKeys props #js [\"config\" \"schema\"])]\n                              (merge (hbjs/js->schema schema) base-schema)\n                              base-schema))]\n    (when-let [tx (goog.object/getValueByKeys props #js [\"config\" \"initialData\"])] \n      (hbjs/transact! conn tx))\n    (react/createElement\n     (goog.object/get homebase-context \"Provider\") \n     #js {:value conn}\n     (goog.object/get props \"children\"))))\n\n(defn ^:export useEntity [lookup]\n  (let [conn (react/useContext homebase-context)\n        run-lookup (fn [] (try-hook \"useEntity\" #(hbjs/entity conn lookup)))\n        [result setResult] (react/useState (run-lookup))]\n    (react/useEffect\n     (fn use-entity-effect []\n       (let [key (rand)]\n         (d/listen! conn key #(setResult (run-lookup)))\n         (fn unmount-use-entity-effect [] (d/unlisten! conn key))))\n     #js [lookup])\n    [result]))\n\n(defn ^:export useQuery [query & args]\n  (let [conn (react/useContext homebase-context)\n        run-query (fn [] (try-hook \"useQuery\" #(apply hbjs/q query conn args)))\n        [result setResult] (react/useState (run-query))]\n    (react/useEffect\n     (fn use-query-effect []\n       (let [key (rand)]\n         (d/listen! conn key #(setResult (run-query)))\n         (fn unmount-use-query-effect [] (d/unlisten! conn key))))\n     #js [query args])\n    [result]))\n\n(defn ^:export useTransact []\n  (let [conn (react/useContext homebase-context)\n        transact (fn transact [txs] (try-hook \"useTransact\" #(hbjs/transact! conn txs)))]\n    [transact]))"]}