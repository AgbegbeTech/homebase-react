{"version":3,"sources":["homebase/react.cljs"],"mappings":"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","names":["homebase.react/keywordize-str","s","cljs.core._EQ_","cljs.core.subs","cljs.core.keyword","homebase.react/keywordize","coll","cljs.core.js__GT_clj","clojure.walk/postwalk","homebase.react/js->db-attr-overrides","var_args","G__23611","homebase.react/object->db-map","js/Error","data","homebase.react.object__GT_db_map","namespace","cljs.core/reduce-kv","acc","k","v","cljs.core/coll?","cljs.core.assoc","or__4126__auto__","homebase.react/js->entity-lookup","lookup","cljs.core/object?","cljs.core/first","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.react/q-entity-array","seq23612","G__23613","cljs.core/next","G__23614","self__4723__auto__","query","conn","args","cljs.core/deref","cljs.core.apply","datascript.core/q","cljs.core.map","p__23615","vec__23616","cljs.core.nth","id","G__23619","G__23620","datascript.core/entity","cljs.core/to-array","homebase.react/js->datalog","map__23621","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","find","where","cljs.core.symbol","cljs.core.mapv","p__23623","vec__23624","e","av","vec__23627","vec__23630","a","cljs.core/seq","pred","cljs.core.into","homebase.react/js->query","cljs.reader.read_string","datascript.impl.entity/Entity","this","keys","cljs.core.reduce","key","cljs.core/set?","js/homebase","js/homebase.react","js/homebase.react.homebase-context","homebase.react/homebase-context","js/module$node_modules$react$index.createContext","homebase.react/base-schema","homebase.react/HomebaseProvider","props","config","datascript.core.create_conn","cljs.core.merge","datascript.core.transact_BANG_","reagent.core.create_element","homebase.react/useEntity","vec__23633","js/module$node_modules$react$index.useContext","result","setResult","js/module$node_modules$react$index.useState","G__23636","G__23637","js/module$node_modules$react$index.useEffect","cljs.core.rand","datascript.core.listen_BANG_","G__23638","G__23639","G__23640","datascript.core/unlisten!","homebase.react/useQuery","seq23641","G__23642","vec__23643","G__23646","homebase.react/useTransact","transact","txs"],"sourcesContent":["(ns homebase.react\n  (:require\n   [\"react\" :as react]\n   [reagent.core :as r]\n   [clojure.walk :as walk]\n   [datascript.core :as d]\n   [datascript.db :as db]\n   [datascript.impl.entity :as de :refer [Entity]]))\n\n(defn keywordize-str [s]\n  (if (and (string? s) (= (subs s 0 1) \":\"))\n    (keyword (subs s 1))\n    s))\n\n(defn keywordize [coll]\n  (->> (js->clj coll)\n       (walk/postwalk keywordize-str)))\n\n\n(def js->db-attr-overrides\n  {\"id\" :db/id\n   \"identity\" :db/ident\n   \"ident\" :db/ident})\n(defn object->db-map\n  ([data] (object->db-map data \"db\"))\n  ([data namespace]\n   (reduce-kv\n    (fn [acc k v]\n      (if (coll? v) (object->db-map v k)\n          (assoc acc\n                 (or (js->db-attr-overrides k)\n                     (keyword namespace k))\n                 v)))\n    {} (js->clj data))))\n(defn js->entity-lookup [lookup]\n  (cond\n    (number? lookup) lookup\n    (object? lookup) (first (object->db-map lookup))\n    :else nil))\n(comment\n  (object->db-map #js {\"user\" {\"id\" -2 \"name\" \"Arpegius\"}})\n  (first (object->db-map #js {\"identity\" \"wat\"}))\n  (js->entity-lookup 1)\n  (js->entity-lookup #js {\"identity\" \"todoFilters\"}))\n\n\n(defn q-entity-array [query conn & args]\n  (->> (apply d/q query @conn args)\n       (map (fn [[id]] (d/entity @conn id)))\n       to-array))\n(defn js->datalog [data]\n  (let [{find \"$find\" where \"$where\"} (js->clj data)]\n    {:find [(symbol (str \"?\" find))]\n     :where (mapv\n             (fn [[e av]]\n               (let [[[a v]] (seq av)\n                     pred [(symbol (str \"?\" e))\n                           (keyword e a)]]\n                 (if (= v \"$any\") pred\n                     (into pred [v]))))\n             where)}))\n(comment\n  (=\n   '[:find ?project\n     :where [[?project :project/name]]]\n   (js->datalog\n    #js {\"$find\" \"project\"\n         \"$where\" {\"project\" {\"name\" \"$any\"}}})))\n(defn js->query [query]\n  (cond\n    ; Assume datalog\n    ; NOTE: this only supports the most basic find clauses\n    ;       E.g. `:find ?e`\n    ;       Not  `:find ?e ...` or `:find ?e .` or `:find ?e ?a ?b`\n    ; TODO: should this support more complex :find queries?\n    (string? query) (cljs.reader/read-string query)\n    ; Assume JSON style query\n    (object? query) (js->datalog query)\n    :else nil))\n\n\n(extend-type Entity\n  Object\n  (get [this & keys]\n    (reduce\n     (fn [acc key]\n       (cond\n         (set? acc) (get (first acc) (keywordize key))\n         acc (get acc (keywordize key))\n         :else nil))\n     this keys)))\n\n\n(defonce homebase-context (react/createContext))\n\n(def base-schema\n  {:db/ident {:db/unique :db.unique/identity}})\n\n(defn ^:export HomebaseProvider [props]\n  (let [config (.-config props)\n        conn (d/create-conn (merge (keywordize (.-schema config))\n                                   base-schema))]\n    (when (.-initialData config) (d/transact! conn (keywordize (.-initialData config))))\n    (r/create-element\n     (.-Provider homebase-context) #js {:value conn}\n     (.-children props))))\n\n(defn ^:export useEntity [lookup]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (d/entity @conn (js->entity-lookup lookup)))]\n    (react/useEffect\n     (fn [] (let [key (rand)]\n              (d/listen! conn key #(setResult (d/entity @conn (js->entity-lookup lookup))))\n              (fn [] (d/unlisten! conn key))))\n     #js [lookup])\n    [result]))\n\n(defn ^:export useQuery [query & args]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (apply q-entity-array (js->query query) conn (keywordize args)))]\n    (react/useEffect\n     (fn [] (let [key (rand)]\n              (d/listen! conn key #(setResult (apply q-entity-array (js->query query) conn (keywordize args))))\n              (fn [] (d/unlisten! conn key))))\n     #js [query args])\n    [result]))\n\n(defn ^:export useTransact []\n  (let [conn (react/useContext homebase-context)\n        transact (fn [txs] (d/transact! conn (keywordize txs)))]\n    [transact]))"]}