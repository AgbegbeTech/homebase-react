{"version":3,"sources":["homebase/react.cljs"],"mappings":"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","names":["homebase.react/keywordize","s","cljs.core._EQ_","cljs.core.subs","cljs.core.keyword","homebase.react/keywordize-coll","coll","cljs.core.js__GT_clj","clojure.walk/postwalk","homebase.react/transact!","conn","txs","datascript.core.transact_BANG_","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.react/q","seq23610","G__23611","cljs.core/first","cljs.core/next","G__23612","self__4723__auto__","query","vars","G__23613","cljs.core/deref","G__23614","datascript.core/entity","cljs.core.apply","datascript.core/q","cljs.reader.read_string","cljs.core.map","p__23615","vec__23616","cljs.core.nth","id","G__23619","G__23620","cljs.core/to-array","datascript.impl.entity/Entity","this","keys","cljs.core.reduce","acc","key","cljs.core/set?","cljs.core.get","js/homebase","js/homebase.react","js/homebase.react.homebase-context","homebase.react/homebase-context","js/module$node_modules$react$index.createContext","homebase.react/HomebaseProvider","props","config","datascript.core.create_conn","reagent.core.create_element","homebase.react/useQuery","vec__23621","js/module$node_modules$react$index.useContext","result","setResult","js/module$node_modules$react$index.useState","js/module$node_modules$react$index.useEffect","cljs.core.rand","listener","G__23624","datascript.core.listen_BANG_","datascript.core/unlisten!","homebase.react/useTransact","transact"],"sourcesContent":["(ns homebase.react\n  (:require\n   [\"react\" :as react]\n   [reagent.core :as r]\n   [clojure.walk :as walk]\n   [datascript.core :as d]\n   [datascript.db :as db]\n   [datascript.impl.entity :as de :refer [Entity]]))\n\n(defn keywordize [s]\n  (if (and (string? s) (= (subs s 0 1) \":\"))\n    (keyword (subs s 1))\n    s))\n\n(defn keywordize-coll [coll]\n  (->> (js->clj coll)\n       (walk/postwalk keywordize)))\n\n(defn transact! [conn txs]\n  (d/transact! conn (keywordize-coll txs)))\n\n(defn q [query conn & vars]\n  (cond\n      ; Assume a :db/id lookup\n    (number? query) (d/entity @conn (keywordize-coll query))\n      ; Assume datalog\n    (string? query) (->> (apply d/q (cljs.reader/read-string query) @conn vars)\n                         (map (fn [[id]] (d/entity @conn id)))\n                         to-array) \n    :else nil))\n\n\n(extend-type Entity\n  Object\n  (get [this & keys]\n    (reduce \n     (fn [acc key] \n       (cond \n         (set? acc) (get (first acc) (keywordize-coll key))\n         acc (get acc (keywordize-coll key))\n         :else nil))\n     this keys)))\n\n\n(defonce homebase-context (react/createContext))\n\n(defn ^:export HomebaseProvider [props]\n  (let [config (.-config props)\n        conn (d/create-conn (keywordize-coll (.-schema config)))]\n    (when (.-initialData config) (transact! conn (.-initialData config)))\n    (r/create-element\n     (.-Provider homebase-context) #js {:value conn}\n     (.-children props))))\n\n(defn ^:export useQuery [query]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (q query conn))]\n    (react/useEffect \n     (fn []\n       (let [key (rand)\n             listener (fn [] (setResult (q query conn)))]\n         (d/listen! conn key listener)\n         (fn [] (d/unlisten! conn key)))))\n    [result]))\n\n(defn ^:export useTransact []\n  (let [conn (react/useContext homebase-context)\n        transact (fn [txs] (transact! conn txs))]\n    [transact]))"]}