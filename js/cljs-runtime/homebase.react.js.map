{"version":3,"sources":["homebase/react.cljs"],"mappings":"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","names":["homebase.react/keywordize-str","s","cljs.core._EQ_","cljs.core.subs","cljs.core.keyword","homebase.react/keywordize","coll","cljs.core.js__GT_clj","clojure.walk/postwalk","homebase.react/js->db-attr-overrides","homebase.react/bool-re","homebase.react/js->bool-key","string","temp__5735__auto__","vec__23899","cljs.core.nth","_","verb","key","cljs.core/re-find","homebase.react/js->key-not-memo","namespace","or__4126__auto__","cljs.core.get","camel-snake-kebab.core/->kebab-case","homebase.react/js->key","cljs.core/memoize","var_args","G__23903","homebase.react/js->tx","js/Error","data","homebase.react.js__GT_tx","cljs.core/reduce-kv","acc","k","v","cljs.core/coll?","cljs.core.assoc","homebase.react/js->entity-lookup","lookup","cljs.core/object?","cljs.core/first","homebase.react/paths","m","cljs.core/map?","cljs.core/empty?","iter__4529__auto__","s__23908","cljs.core/LazySeq","cljs.core/seq","xs__6292__auto__","vec__23913","iterys__4525__auto__","s__23910","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__23912","cljs.core/chunk-buffer","i__23911","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23909","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__23907","subkey","homebase.react/str->schema-key","homebase.react/js->schema","schema","cljs.core.reduce","p__23934","vec__23935","nms","nm","p","cljs.core.get_in","cljs.core/assoc-in","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.react/q-entity-array","seq23938","G__23939","cljs.core/next","G__23940","self__4723__auto__","query","conn","args","cljs.core/deref","cljs.core.apply","datascript.core/q","cljs.core.map","p__23959","vec__23960","id","G__23963","G__23964","datascript.core/entity","cljs.core/to-array","homebase.react/js->datalog","map__23965","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","find","where","cljs.core.symbol","cljs.core.mapv","p__23967","vec__23968","e","av","vec__23971","vec__23974","a","pred","cljs.core.into","homebase.react/js->query","cljs.reader.read_string","datascript.impl.entity/Entity","this","keys","cljs.core/set?","js/homebase","js/homebase.react","js/homebase.react.homebase-context","homebase.react/homebase-context","js/module$node_modules$react$index.createContext","homebase.react/base-schema","homebase.react/HomebaseProvider","props","config","datascript.core.create_conn","cljs.core.merge","datascript.core.transact_BANG_","reagent.core.create_element","homebase.react/useEntity","vec__23986","js/module$node_modules$react$index.useContext","result","setResult","js/module$node_modules$react$index.useState","G__23989","G__23990","js/module$node_modules$react$index.useEffect","cljs.core.rand","datascript.core.listen_BANG_","G__23991","G__23992","G__23993","datascript.core/unlisten!","homebase.react/useQuery","seq23994","G__23995","vec__23996","G__24017","homebase.react/useTransact","transact","txs","cljs.core/chunk-first"],"sourcesContent":["(ns homebase.react\n  (:require\n   [\"react\" :as react]\n   [reagent.core :as r]\n   [clojure.walk :as walk]\n   [camel-snake-kebab.core :as csk]\n   [datascript.core :as d]\n   [datascript.impl.entity :as de :refer [Entity]]))\n\n(defn keywordize-str [s]\n  (if (and (string? s) (= (subs s 0 1) \":\"))\n    (keyword (subs s 1))\n    s))\n\n(defn keywordize [coll]\n  (->> (js->clj coll)\n       (walk/postwalk keywordize-str)))\n\n\n(def js->db-attr-overrides\n  {\"id\" :db/id\n   \"identity\" :db/ident\n   \"ident\" :db/ident})\n(def bool-re #\"^(is|has|show|hide)(-|_)?(.*)\")\n(defn js->bool-key [string]\n  (when-let [[_ verb _ key] (re-find bool-re string)]\n    (if (= \"is\" verb) (str key \"?\") (str verb \"-\" key \"?\"))))\n(defn js->key-not-memo [namespace string]\n  (or\n   (get js->db-attr-overrides string)\n   (keyword (csk/->kebab-case namespace)\n            (csk/->kebab-case\n             (or (js->bool-key string)\n                 string)))))\n(def js->key (memoize js->key-not-memo))\n\n(comment\n  (js->key \"ok\" \"watThing\")\n  (js->key \"ok\" \"id\")\n  (js->key \"ok\" \"is_good\"))\n\n(defn js->tx\n  ([data] (js->tx data \"db\"))\n  ([data namespace]\n   (reduce-kv\n    (fn [acc k v]\n      (if (coll? v)\n        (js->tx v k)\n        (assoc acc (js->key namespace k) v)))\n    {} (js->clj data))))\n(defn js->entity-lookup [lookup]\n  (cond\n    (number? lookup) lookup\n    (object? lookup) (first (js->tx lookup))\n    :else nil))\n(comment\n  (js->tx #js {\"user\" {\"id\" -2\n                       \"name\" \"Arpegius\"}})\n  (map js->tx #js [{\"todoFilter\" {\"identity\" \"todoFilters\"\n                                  \"showCompleted\" true\n                                  \"project\" 0}}])\n  (first (js->tx #js {\"identity\" \"wat\"}))\n  (js->entity-lookup 1)\n  (js->entity-lookup #js {\"identity\" \"todoFilters\"}))\n\n(defn paths [m]\n  (if (or (not (map? m)) (empty? m))\n    '(())\n    (for [[k v] m\n          subkey (paths v)]\n      (cons k subkey))))\n\n(def str->schema-key\n  {\"unique\" :db/unique\n   \"identity\" :db.unique/identity\n   \"type\" :db/valueType\n   \"ref\" :db.type/ref})\n(defn js->schema [schema]\n  (let [schema (js->clj schema)]\n    (reduce (fn [acc [nms nm k :as p]]\n              (let [v (get str->schema-key (get-in schema p))\n                    k (get str->schema-key k)]\n                (assoc-in acc [(js->key nms nm) k] v)))\n            {} (paths schema))))\n(comment\n  (=\n   {:project/name #:db{:unique :db.unique/identity}\n    :todo/project #:db{:valueType :db.type/ref, :unique :db.unique/identity}\n    :todo/owner #:db{:valueType :db.type/ref}}\n   (js->schema #js {\"project\" {\"name\" {\"unique\" \"identity\"}}\n                    \"todo\" {\"project\" {\"type\" \"ref\"\n                                       \"unique\" \"identity\"}\n                            \"owner\" {\"type\" \"ref\"}}})))\n\n(defn q-entity-array [query conn & args]\n  (->> (apply d/q query @conn args)\n       (map (fn [[id]] (d/entity @conn id)))\n       to-array))\n(defn js->datalog [data]\n  (let [{find \"$find\" where \"$where\"} (js->clj data)]\n    {:find [(symbol (str \"?\" find))]\n     :where (mapv\n             (fn [[e av]]\n               (let [[[a v]] (seq av)\n                     pred [(symbol (str \"?\" e))\n                           (keyword e a)]]\n                 (if (= v \"$any\") pred\n                     (into pred [v]))))\n             where)}))\n(comment\n  (=\n   '[:find ?project\n     :where [[?project :project/name]]]\n   (js->datalog\n    #js {\"$find\" \"project\"\n         \"$where\" {\"project\" {\"name\" \"$any\"}}})))\n(defn js->query [query]\n  (cond\n    ; Assume datalog\n    ; NOTE: this only supports the most basic find clauses\n    ;       E.g. `:find ?e`\n    ;       Not  `:find ?e ...` or `:find ?e .` or `:find ?e ?a ?b`\n    ; TODO: should this support more complex :find queries?\n    (string? query) (cljs.reader/read-string query)\n    ; Assume JSON style query\n    (object? query) (js->datalog query)\n    :else nil))\n\n\n(extend-type Entity\n  Object\n  (get [this & keys]\n    (reduce\n     (fn [acc key]\n       (cond\n         (set? acc) (get (first acc) (keywordize key))\n         acc (get acc (keywordize key))\n         :else nil))\n     this keys)))\n\n\n(defonce homebase-context (react/createContext))\n\n(def base-schema\n  {:db/ident {:db/unique :db.unique/identity}})\n\n(defn ^:export HomebaseProvider [props]\n  (let [config (.-config props)\n        conn (d/create-conn (merge (js->schema (.-schema config)) \n                                   base-schema))]\n    (when (.-initialData config) \n      (d/transact! conn (map js->tx (.-initialData config))))\n    (r/create-element\n     (.-Provider homebase-context) #js {:value conn}\n     (.-children props))))\n\n(defn ^:export useEntity [lookup]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (d/entity @conn (js->entity-lookup lookup)))]\n    (react/useEffect\n     (fn [] (let [key (rand)]\n              (d/listen! conn key #(setResult (d/entity @conn (js->entity-lookup lookup))))\n              (fn [] (d/unlisten! conn key))))\n     #js [lookup])\n    [result]))\n\n(defn ^:export useQuery [query & args]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (apply q-entity-array (js->query query) conn (keywordize args)))]\n    (react/useEffect\n     (fn [] (let [key (rand)]\n              (d/listen! conn key #(setResult (apply q-entity-array (js->query query) conn (keywordize args))))\n              (fn [] (d/unlisten! conn key))))\n     #js [query args])\n    [result]))\n\n(defn ^:export useTransact []\n  (let [conn (react/useContext homebase-context)\n        transact (fn [txs] (d/transact! conn (keywordize txs)))]\n    [transact]))"]}