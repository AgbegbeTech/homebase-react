{"version":3,"sources":["homebase/react.cljs"],"mappings":"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","names":["homebase.react/keywordize","s","cljs.core._EQ_","cljs.core.subs","cljs.core.keyword","homebase.react/keywordize-coll","coll","cljs.core.js__GT_clj","clojure.walk/postwalk","homebase.react/transact!","conn","txs","datascript.core.transact_BANG_","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.react/json-query","seq23610","G__23611","cljs.core/first","cljs.core/next","G__23612","self__4723__auto__","query","args","cljs.core/deref","cljs.core.apply","datascript.core/q","cljs.reader.read_string","cljs.core.map","p__23613","vec__23614","cljs.core.nth","id","G__23617","G__23618","datascript.core/entity","cljs.core/to-array","homebase.react/q","seq23619","G__23620","G__23621","keywordized-args","G__23622","G__23623","p__23624","vec__23625","G__23628","G__23629","cljs.core/array?","G__23630","G__23631","cljs.core/object?","datascript.impl.entity/Entity","this","keys","cljs.core.reduce","acc","key","cljs.core/set?","cljs.core.get","js/homebase","js/homebase.react","js/homebase.react.homebase-context","homebase.react/homebase-context","js/module$node_modules$react$index.createContext","homebase.react/HomebaseProvider","props","config","datascript.core.create_conn","reagent.core.create_element","homebase.react/useQuery","seq23632","G__23633","vec__23634","js/module$node_modules$react$index.useContext","result","setResult","js/module$node_modules$react$index.useState","js/module$node_modules$react$index.useEffect","cljs.core.rand","datascript.core.listen_BANG_","G__23637","datascript.core/unlisten!","homebase.react/useTransact","transact"],"sourcesContent":["(ns homebase.react\n  (:require\n   [\"react\" :as react]\n   [reagent.core :as r]\n   [clojure.walk :as walk]\n   [datascript.core :as d]\n   [datascript.db :as db]\n   [datascript.impl.entity :as de :refer [Entity]]))\n\n(defn keywordize [s]\n  (if (and (string? s) (= (subs s 0 1) \":\"))\n    (keyword (subs s 1))\n    s))\n\n(defn keywordize-coll [coll]\n  (->> (js->clj coll)\n       (walk/postwalk keywordize)))\n\n(defn transact! [conn txs]\n  (d/transact! conn (keywordize-coll txs)))\n\n(defn json-query [query conn & args]\n  (->> (apply d/q (cljs.reader/read-string query) @conn args)\n       (map (fn [[id]] (d/entity @conn id)))\n       to-array))\n\n(defn q [query conn & args]\n  (let [keywordized-args (map keywordize args)]\n    (cond\n    ; Assume a :db/id lookup\n      (number? query) (d/entity @conn (keywordize-coll query))\n    ; Assume datalog\n    ; NOTE: this only supports the most basic find clauses\n    ;       E.g. `:find ?e`\n    ;       Not  `:find ?e ...` or `:find ?e .` or `:find ?e ?a ?b`\n    ; TODO: should this support more complex :find queries?\n      (string? query) (->> (apply d/q (cljs.reader/read-string query) @conn keywordized-args)\n                           (map (fn [[id]] (d/entity @conn id)))\n                           to-array) \n    ; Assume entity KV lookup\n      (array? query) (d/entity @conn (keywordize-coll query))\n    ; Assume JSON style query\n      (object? query) (apply json-query query conn keywordized-args)\n      :else nil)))\n\n\n(extend-type Entity\n  Object\n  (get [this & keys]\n    (reduce \n     (fn [acc key] \n       (cond \n         (set? acc) (get (first acc) (keywordize-coll key))\n         acc (get acc (keywordize-coll key))\n         :else nil))\n     this keys)))\n\n\n(defonce homebase-context (react/createContext))\n\n(defn ^:export HomebaseProvider [props]\n  (let [config (.-config props)\n        conn (d/create-conn (keywordize-coll (.-schema config)))]\n    (when (.-initialData config) (transact! conn (.-initialData config)))\n    (r/create-element\n     (.-Provider homebase-context) #js {:value conn}\n     (.-children props))))\n\n(defn ^:export useQuery [query & args]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (apply q query conn args))]\n    (react/useEffect \n     (fn [] (let [key (rand)]\n              (d/listen! conn key #(setResult (apply q query conn args)))\n              (fn [] (d/unlisten! conn key)))))\n    [result query args]))\n\n(defn ^:export useTransact []\n  (let [conn (react/useContext homebase-context)\n        transact (fn [txs] (transact! conn txs))]\n    [transact]))"]}