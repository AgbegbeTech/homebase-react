{"version":3,"sources":["homebase/react.cljs"],"mappings":";;AAOA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAiB,AAACC;;AAE3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAGL,AAAA,AAAeC,AAAkBC;AAAjC,AACE,AAAMC,AAAO,AAAUD;AACjBE,AAAK,AAACC,AAAc,AAAI,AAAUF,AACZ,AAACG,AAAM,AAACC,AAAgB,AAAUJ,AAASH,AAC3CA;AAH5B,AAIE,AAAM,AAAeG;AAArB,AAA6B,AAACK,AAAeJ,AAAK,AAAeD;;AAAjE;;AACA,AAAA,AAACM,AACA,AAAYX,AAA8BM,AAC1C,AAAYF;;;AAEjB,AAAA,AAAeQ,AAAWC;AAA1B,AACE,AAAMP,AAAK,AAACU,AAAiBhB;AAA7Bc,AACyB,AAACK,AAAe,AAACC,AAAYd,AAAKO;AAD3D,AAAAE,AAAAD,AAAA,AAAA,AACOG;AADP,AAAAF,AAAAD,AAAA,AAAA,AACcI;AADd,AAEE,AAACG,AACA;AAAA,AAAyB,AAAMC,AAAI,AAACC;AAAX,AAChB,AAAA,AAACC,AAAUlB,AAAKgB;AAAhB,AAAqB,AAAAG,AAAW,AAACL,AAAYd,AAAKO;AAA7B,AAAA,AAAAY,AAAAA,AAACP,AAAAA,AAAAA;;;AACtB;AAAA,AAAiC,AAACQ,AAAYpB,AAAKgB;;AAH7D,AAIMT;;AANR,AAOGI;;;AAEL,AAAA,AAAA,AAAAU,AAAeM;AAAf,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;;AAAA,AAAA,AAAA,AAAA,AAAeE,AAAUM,AAAQC;AAAjC,AACE,AAAMlC,AAAK,AAACU,AAAiBhB;AAA7ByC,AACyB,AAACtB,AAAe,AAACuB,AAAMC,AAAOJ,AAAMjC,AAAKkC;AADlE,AAAAzB,AAAA0B,AAAA,AAAA,AACOxB;AADP,AAAAF,AAAA0B,AAAA,AAAA,AACcvB;AADd,AAEE,AAACG,AACA;AAAA,AAAwB,AAAMC,AAAI,AAACC;AAAX,AACf,AAAA,AAACC,AAAUlB,AAAKgB;AAAhB,AAAqB,AAAAsB,AAAW,AAACF,AAAMC,AAAOJ,AAAMjC,AAAKkC;AAApC,AAAA,AAAAI,AAAAA,AAAC1B,AAAAA,AAAAA;;;AACtB;AAAA,AAAgC,AAACQ,AAAYpB,AAAKgB;;AAH5D,AAIMiB,AAAMC;;AANd,AAOGvB;;;AARL,AAAA,AAAA,AAAegB;;AAAf;AAAA,AAAA,AAAA,AAAAC,AAAeD;AAAf,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAUA,AAAA,AAAeW;AAAf,AACE,AAAMvC,AAAK,AAACU,AAAiBhB;AACvB8C,AAAS,AAAcC;AAAd,AAAmB,AAACrC,AAAeJ,AAAKyC;;AADvD,AAAA,AAEGD","names":["js/homebase","js/homebase.react","js/homebase.react.homebase-context","homebase.react/homebase-context","js/module$node_modules$react$index.createContext","homebase.react/base-schema","homebase.react/HomebaseProvider","props","config","conn","datascript.core.create_conn","cljs.core.merge","homebase.js/js->schema","homebase.js/transact!","reagent.core.create_element","homebase.react/useEntity","lookup","vec__24024","cljs.core.nth","js/module$node_modules$react$index.useContext","result","setResult","js/module$node_modules$react$index.useState","homebase.js/entity","js/module$node_modules$react$index.useEffect","key","cljs.core.rand","datascript.core.listen_BANG_","G__24027","datascript.core/unlisten!","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.react/useQuery","seq24028","G__24029","cljs.core/first","cljs.core/next","self__4723__auto__","query","args","vec__24030","cljs.core.apply","homebase.js/q","G__24033","homebase.react/useTransact","transact","txs"],"sourcesContent":["(ns homebase.react\n  (:require\n   [\"react\" :as react]\n   [reagent.core :as r]\n   [homebase.js :as hbjs]\n   [datascript.core :as d]))\n\n(defonce homebase-context (react/createContext))\n\n(def base-schema\n  {:db/ident {:db/unique :db.unique/identity}})\n\n(defn ^:export HomebaseProvider [props]\n  (let [config (.-config props)\n        conn (d/create-conn (if (.-schema config)\n                              (merge (hbjs/js->schema (.-schema config)) base-schema)\n                              base-schema))]\n    (when (.-initialData config) (hbjs/transact! conn (.-initialData config)))\n    (r/create-element\n     (.-Provider homebase-context) #js {:value conn}\n     (.-children props))))\n\n(defn ^:export useEntity [lookup]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (hbjs/entity conn lookup))]\n    (react/useEffect\n     (fn use-entity-effect [] (let [key (rand)]\n              (d/listen! conn key #(setResult (hbjs/entity conn lookup)))\n              (fn unmount-use-entity-effect [] (d/unlisten! conn key))))\n     #js [lookup])\n    [result]))\n\n(defn ^:export useQuery [query & args]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (apply hbjs/q query conn args))]\n    (react/useEffect\n     (fn use-query-effect [] (let [key (rand)]\n              (d/listen! conn key #(setResult (apply hbjs/q query conn args)))\n              (fn unmount-use-query-effect [] (d/unlisten! conn key))))\n     #js [query args])\n    [result]))\n\n(defn ^:export useTransact []\n  (let [conn (react/useContext homebase-context)\n        transact (fn transact [txs] (hbjs/transact! conn txs))]\n    [transact]))"]}