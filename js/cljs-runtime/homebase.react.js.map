{"version":3,"sources":["homebase/react.cljs"],"mappings":"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","names":["homebase.react/keywordize-str","s","cljs.core._EQ_","cljs.core.subs","cljs.core.keyword","homebase.react/keywordize","coll","cljs.core.js__GT_clj","clojure.walk/postwalk","homebase.react/transact!","conn","txs","datascript.core.transact_BANG_","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","homebase.react/json-query","seq23610","G__23611","cljs.core/first","cljs.core/next","G__23612","self__4723__auto__","query","args","cljs.core/deref","cljs.core.apply","datascript.core/q","cljs.reader.read_string","cljs.core.map","p__23613","vec__23614","cljs.core.nth","id","G__23617","G__23618","datascript.core/entity","cljs.core/to-array","homebase.react/js->datalog","data","map__23619","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","find","where","cljs.core.symbol","cljs.core.mapv","p__23621","vec__23622","e","av","vec__23625","vec__23628","a","v","cljs.core/seq","pred","cljs.core.into","homebase.react/q-entity-array","seq23631","G__23632","G__23633","p__23634","vec__23635","G__23638","G__23639","homebase.react/js->db-attr-overrides","G__23641","homebase.react/object->db-map","js/Error","homebase.react.object__GT_db_map","namespace","cljs.core/reduce-kv","acc","k","cljs.core/coll?","cljs.core.assoc","or__4126__auto__","homebase.react/js->entity-lookup","lookup","cljs.core/object?","homebase.react/q","seq23642","G__23643","G__23644","datascript.impl.entity/Entity","this","keys","cljs.core.reduce","key","cljs.core/set?","js/homebase","js/homebase.react","js/homebase.react.homebase-context","homebase.react/homebase-context","js/module$node_modules$react$index.createContext","homebase.react/base-schema","homebase.react/HomebaseProvider","props","config","datascript.core.create_conn","cljs.core.merge","reagent.core.create_element","homebase.react/useEntity","vec__23645","js/module$node_modules$react$index.useContext","result","setResult","js/module$node_modules$react$index.useState","G__23648","G__23649","js/module$node_modules$react$index.useEffect","cljs.core.rand","datascript.core.listen_BANG_","G__23650","G__23651","G__23652","datascript.core/unlisten!","homebase.react/useQuery","seq23653","G__23654","vec__23655","G__23658","homebase.react/useTransact","transact"],"sourcesContent":["(ns homebase.react\n  (:require\n   [\"react\" :as react]\n   [reagent.core :as r]\n   [clojure.walk :as walk]\n   [datascript.core :as d]\n   [datascript.db :as db]\n   [datascript.impl.entity :as de :refer [Entity]]))\n\n(defn keywordize-str [s]\n  (if (and (string? s) (= (subs s 0 1) \":\"))\n    (keyword (subs s 1))\n    s))\n\n(defn keywordize [coll]\n  (->> (js->clj coll)\n       (walk/postwalk keywordize-str)))\n\n(defn transact! [conn txs]\n  (d/transact! conn (keywordize txs)))\n\n(defn json-query [query conn & args]\n  (->> (apply d/q (cljs.reader/read-string query) @conn args)\n       (map (fn [[id]] (d/entity @conn id)))\n       to-array))\n\n(defn js->datalog [data]\n  (let [{find \"$find\" where \"$where\"} (js->clj data)]\n    {:find [(symbol (str \"?\" find))]\n     :where (mapv\n             (fn [[e av]]\n               (let [[[a v]] (seq av)\n                     pred [(symbol (str \"?\" e))\n                           (keyword e a)]]\n                 (if (= v \"$any\") pred\n                     (into pred [v]))))\n             where)}))\n\n(comment\n  (=\n   '[:find ?project\n     :where [[?project :project/name]]]\n   (js->datalog\n    #js {\"$find\" \"project\"\n         \"$where\" {\"project\" {\"name\" \"$any\"}}})))\n\n(defn q-entity-array [query conn & args]\n  (->> (apply d/q query @conn args)\n       (map (fn [[id]] (d/entity @conn id)))\n       to-array))\n\n(def js->db-attr-overrides\n  {\"id\" :db/id\n   \"identity\" :db/ident\n   \"ident\" :db/ident})\n\n(defn object->db-map \n  ([data] (object->db-map data \"db\"))\n  ([data namespace]\n   (reduce-kv\n    (fn [acc k v]\n      (if (coll? v) (object->db-map v k)\n          (assoc acc \n                 (or (js->db-attr-overrides k) \n                     (keyword namespace k)) \n                 v)))\n    {} (js->clj data))))\n\n(defn js->entity-lookup [lookup]\n  (cond\n    (number? lookup) lookup\n    (object? lookup) (first (object->db-map lookup))\n    :else nil))\n\n(comment\n  (sequential? 1)\n  (walk/postwalk (fn [k]\n                   (println k)\n                   (if (sequential? k) (seq k) k))\n                 {\"a\" {\"b\" 1}})\n  (object->db-map #js {\"user\" {\"id\" -2 \"name\" \"Arpegius\"}})\n  (first (object->db-map #js {\"identity\" \"wat\"}))\n  (js->entity-lookup 1)\n  (js->entity-lookup \n   #js {\"identity\" \"todoFilters\"}))\n\n(defn q [query conn & args]\n  (cond\n    ; Assume datalog\n    ; NOTE: this only supports the most basic find clauses\n    ;       E.g. `:find ?e`\n    ;       Not  `:find ?e ...` or `:find ?e .` or `:find ?e ?a ?b`\n    ; TODO: should this support more complex :find queries?\n    (string? query) (apply q-entity-array (cljs.reader/read-string query) conn (keywordize args))\n    ; Assume JSON style query\n    (object? query) (apply q-entity-array (js->datalog query) conn (keywordize args))\n    :else nil))\n\n\n(extend-type Entity\n  Object\n  (get [this & keys]\n    (reduce \n     (fn [acc key] \n       (cond \n         (set? acc) (get (first acc) (keywordize key))\n         acc (get acc (keywordize key))\n         :else nil))\n     this keys)))\n\n(defonce homebase-context (react/createContext))\n\n(def base-schema \n  {:db/ident {:db/unique :db.unique/identity}})\n\n(defn ^:export HomebaseProvider [props]\n  (let [config (.-config props)\n        conn (d/create-conn (merge (keywordize (.-schema config))\n                                   base-schema))]\n    (when (.-initialData config) (transact! conn (.-initialData config)))\n    (r/create-element\n     (.-Provider homebase-context) #js {:value conn}\n     (.-children props))))\n\n(defn ^:export useEntity [lookup]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (d/entity @conn (js->entity-lookup lookup)))]\n    (react/useEffect \n     (fn [] (let [key (rand)]\n              (d/listen! conn key #(setResult (d/entity @conn (js->entity-lookup lookup))))\n              (fn [] (d/unlisten! conn key))))\n     #js [lookup])\n    [result]))\n\n(defn ^:export useQuery [query & args]\n  (let [conn (react/useContext homebase-context)\n        [result setResult] (react/useState (apply q query conn args))]\n    (react/useEffect \n     (fn [] (let [key (rand)]\n              (d/listen! conn key #(setResult (apply q query conn args)))\n              (fn [] (d/unlisten! conn key))))\n     #js [query args])\n    [result]))\n\n(defn ^:export useTransact []\n  (let [conn (react/useContext homebase-context)\n        transact (fn [txs] (transact! conn txs))]\n    [transact]))"]}