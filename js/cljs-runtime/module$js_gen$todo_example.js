shadow$provide.module$js_gen$todo_example=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.App=void 0;var _react=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$react$index"));const {HomebaseProvider,useTransact,useQuery,useEntity}=window.homebase.react;exports.App=()=>_react.default.createElement(HomebaseProvider,{config},_react.default.createElement(Todos,null));const config={schema:{project:{name:{unique:"identity"}},
todo:{project:{type:"ref"},owner:{type:"ref"}}},initialData:[{todoFilter:{identity:"todoFilters",showCompleted:!0,project:0}},{user:{id:-1,name:"Stella"}},{user:{id:-2,name:"Arpegius"}},{project:{id:-3,name:"Make it"}},{project:{id:-4,name:"Do it"}},{todo:{name:"Fix ship",owner:-1,project:-3,isCompleted:!0,createdAt:new Date("2003/11/10")}},{todo:{name:"Go home",owner:-2,project:-4,createdAt:new Date("2003/11/10")}}]},Todos=()=>_react.default.createElement("div",null,_react.default.createElement(NewTodo,
null),_react.default.createElement(TodoFilters,null),_react.default.createElement(TodoList,null)),NewTodo=()=>{const [transact]=useTransact();return _react.default.createElement("form",{onSubmit:e=>{e.preventDefault();transact([{todo:{name:e.target.elements["todo-name"].value,createdAt:new Date}}]);e.target.reset()}},_react.default.createElement("input",{autoFocus:!0,type:"text",name:"todo-name",placeholder:"What needs to be done?",autoComplete:"off",required:!0})," ",_react.default.createElement("button",
{type:"submit"},"Create Todo"))},TodoFilters=()=>{const [filters]=useEntity({identity:"todoFilters"}),[transact]=useTransact();return _react.default.createElement("div",null,_react.default.createElement("label",{htmlFor:"show-completed"},"Show Completed?"),_react.default.createElement("input",{type:"checkbox",id:"show-completed",checked:filters.get("showCompleted"),onChange:e=>transact([{todoFilter:{id:filters.get("id"),showCompleted:e.target.checked}}])})," · ",_react.default.createElement(ProjectSelect,
{value:filters.get("project"),onChange:project=>transact([{todoFilter:{id:filters.get("id"),project}}])}))},ProjectSelect=$jscomp$destructuring$var0=>{var {value,onChange}=$jscomp$destructuring$var0;[$jscomp$destructuring$var0]=useQuery({$find:"project",$where:{project:{name:"$any"}}});return _react.default.createElement(_react.default.Fragment,null,_react.default.createElement("label",null,"Project:")," ",_react.default.createElement("select",{name:"projects",value,onChange:e=>onChange&&onChange(Number(e.target.value))},
_react.default.createElement("option",{value:"0"}),$jscomp$destructuring$var0.map(project=>_react.default.createElement("option",{key:project.get("id"),value:project.get("id")},project.get("name")))))},TodoList=()=>{const [filters]=useEntity({identity:"todoFilters"}),[todos]=useQuery({$find:"todo",$where:{todo:{name:"$any"}}});return _react.default.createElement("div",null,todos.filter(todo=>!filters.get("showCompleted")&&todo.get("isCompleted")||filters.get("project")&&todo.get("project","id")!==
filters.get("project")?!1:!0).sort((a,b)=>a.get("createdAt")>b.get("createdAt")?-1:1).map(todo=>_react.default.createElement(Todo,{key:todo.get("id"),todo})))},Todo=$jscomp$destructuring$var1=>{({todo:$jscomp$destructuring$var1}=$jscomp$destructuring$var1);return _react.default.createElement("div",null,_react.default.createElement("div",{style:{display:"flex",flexDirection:"row",alignItems:"flex-end",paddingTop:20}},_react.default.createElement(TodoCheck,{todo:$jscomp$destructuring$var1}),_react.default.createElement(TodoName,
{todo:$jscomp$destructuring$var1})),_react.default.createElement("div",null,_react.default.createElement(TodoProject,{todo:$jscomp$destructuring$var1})," · ",_react.default.createElement(TodoOwner,{todo:$jscomp$destructuring$var1})," · ",_react.default.createElement(TodoDelete,{todo:$jscomp$destructuring$var1})),_react.default.createElement("small",{style:{color:"grey"}},$jscomp$destructuring$var1.get("createdAt").toLocaleString()))},TodoCheck=$jscomp$destructuring$var2=>{var {todo}=$jscomp$destructuring$var2;
const [transact]=useTransact();return _react.default.createElement("input",{type:"checkbox",style:{width:20,height:20,cursor:"pointer"},checked:!!todo.get("isCompleted"),onChange:e=>transact([{todo:{id:todo.get("id"),isCompleted:e.target.checked}}])})},TodoName=$jscomp$destructuring$var3=>{var {todo}=$jscomp$destructuring$var3;const [transact]=useTransact();return _react.default.createElement("input",{style:Object.assign({},{border:"none",fontSize:20,marginTop:-2,cursor:"pointer"},todo.get("isCompleted")&&
{textDecoration:"line-through "}),value:todo.get("name"),onChange:e=>transact([{todo:{id:todo.get("id"),name:e.target.value}}])})},TodoProject=$jscomp$destructuring$var4=>{var {todo}=$jscomp$destructuring$var4;const [transact]=useTransact();return _react.default.createElement(ProjectSelect,{value:todo.get("project","id")||"",onChange:projectId=>transact([{todo:{id:todo.get("id"),project:projectId||null}}])})},TodoOwner=$jscomp$destructuring$var5=>{var {todo}=$jscomp$destructuring$var5;const [transact]=
useTransact();[$jscomp$destructuring$var5]=useQuery({$find:"user",$where:{user:{name:"$any"}}});return _react.default.createElement(_react.default.Fragment,null,_react.default.createElement("label",null,"Owner:")," ",_react.default.createElement("select",{name:"users",value:todo.get("owner","id")||"",onChange:e=>transact([{todo:{id:todo.get("id"),owner:Number(e.target.value)||null}}])},_react.default.createElement("option",{value:""}),$jscomp$destructuring$var5.map(user=>_react.default.createElement("option",
{key:user.get("id"),value:user.get("id")},user.get("name")))))},TodoDelete=$jscomp$destructuring$var6=>{var {todo}=$jscomp$destructuring$var6;const [transact]=useTransact();return _react.default.createElement("button",{onClick:()=>transact([["retractEntity",todo.get("id")]])},"Delete")}}
//# sourceMappingURL=module$js_gen$todo_example.js.map
