{"version":3,"sources":["devcards/util/edn_renderer.cljs"],"mappings":"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","names":["js/devcards","js/devcards.util","js/devcards.util.edn-renderer","js/devcards.util.edn-renderer.*key-counter*","devcards.util.edn-renderer/*key-counter*","devcards.util.edn-renderer/get-key","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/deref","devcards.util.edn-renderer/literal?","x","cljs.core/map-entry?","cljs.core/seq?","cljs.core/coll?","devcards.util.edn-renderer/separator*","s","G__17071","G__17072","G__17073","sablono.interpreter/interpret","sablono.core/create-element","devcards.util.edn-renderer/clearfix-separator*","G__17077","G__17078","G__17079","G__17080","G__17081","G__17082","devcards.util.edn-renderer/separate-fn","coll","e17083","cljs.core/every?","js/Error","e","devcards.util.edn-renderer/interpose-separator","rct-coll","sep-fn","cljs.core/rest","cljs.core.interleave","cljs.core.repeatedly","cljs.core/cons","cljs.core/first","cljs.core/to-array","devcards.util.edn-renderer/literal","class","G__17084","G__17085","G__17086","devcards.util.utils/pprint-str","devcards.util.edn-renderer/html-val","index","v","G__17087","G__17088","G__17089","devcards.util.edn-renderer/html","devcards.util.edn-renderer/join-html","separator","cljs.core.into","cljs.core.map_indexed","p__17096","vec__17097","cljs.core.nth","devcards.util.edn-renderer/html-keyval","k","G__17100","G__17101","G__17102","G__17103","cljs.core.prn_str","devcards.util.edn-renderer/html-keyvals","cljs.core.mapv","cljs.core/vals","devcards.util.edn-renderer/open-close","class-str","opener","closer","G__17109","G__17110","G__17111","G__17114","G__17115","G__17116","G__17112","G__17117","G__17118","G__17119","G__17113","G__17120","G__17121","G__17122","cljs.core/hash","devcards.util.edn-renderer/html-collection","devcards.util.edn-renderer/html-map","devcards.util.edn-renderer/html-string","cljs.core/Keyword","cljs.core/Symbol","cljs.core/map?","cljs.core/set?","cljs.core/vector?","devcards.util.edn-renderer/html-edn","*key-counter*-orig-val__17140","*key-counter*-temp-val__17141","cljs.core.atom","G__17142","G__17143","G__17144"],"sourcesContent":["(ns devcards.util.edn-renderer\n  (:require\n   [sablono.core :as sab]\n   [devcards.util.utils :as utils]))\n\n(defonce ^:dynamic *key-counter* nil)\n\n(defn get-key []\n  (swap! *key-counter* inc)\n  (str \"k-\" @*key-counter*))\n\n(declare html)\n\n(defn literal? [x]\n  (and\n   (not (map-entry? x))\n   (not (seq? x))\n   (not (coll? x))))\n\n(defn separator* [s]\n  (sab/html [:span.seperator {:key (get-key)} s]))\n\n(defn clearfix-separator* [s]\n  (sab/html [:span {:key (get-key)} (separator* s) [:span.clearfix]]))\n\n(defn separate-fn [coll]\n  (try\n    (if (not (every? literal? coll)) clearfix-separator* separator*)\n    (catch js/Error e\n      clearfix-separator*)))\n\n(defn interpose-separator [rct-coll s sep-fn]\n  (->> (rest rct-coll)\n       (interleave (repeatedly #(sep-fn s))) \n       (cons (first rct-coll))\n       to-array))\n\n(defn literal [class x]\n  (sab/html [:span { :className class :key (get-key)} (utils/pprint-str x)]))\n\n(defn html-val [index v]\n  (sab/html [:span {:key index} (html v)]))\n\n(defn join-html [separator coll]\n  (interpose-separator (into [] (map-indexed html-val coll))\n                       separator\n                       (separate-fn coll)))\n\n(defn html-keyval [[k v]]\n  (sab/html\n   [:span.keyval { :key (prn-str k)} (html k) (html v)]))\n\n(defn html-keyvals [coll]\n  (interpose-separator (mapv html-keyval coll)\n                       \" \"\n                       (separate-fn (vals coll))))\n\n(defn open-close [class-str opener closer rct-coll]\n  (sab/html\n   [:span {:className class-str :key (str (hash rct-coll))}\n    [:span.opener {:key 1} opener]\n    [:span.contents {:key 2} rct-coll]\n    [:span.closer {:key 3} closer]]))\n\n(defn html-collection [class opener closer coll]\n  (open-close (str \"collection \" class ) opener closer (join-html \" \" coll))\n    ;; this speeds things up but fails in om\n  #_(rct/pure coll ...)\n  )\n\n(defn html-map [coll]\n  (open-close \"collection map\" \"{\" \"}\" (html-keyvals coll))\n  ;; this speeds things up but fails in om\n  #_(rct/pure coll ...))\n\n(defn html-string [s]\n  (open-close \"string\" \"\\\"\" \"\\\"\" s))\n\n(defn html [x]\n  (cond\n   (number? x)  (literal \"number\" x)\n   (keyword? x) (literal \"keyword\" x)\n   (symbol? x)  (literal \"symbol\" x)\n   (string? x)  (html-string x)\n   (map? x)     (html-map x)\n   (set? x)     (html-collection \"set\"    \"#{\" \"}\" x)\n   (vector? x)  (html-collection \"vector\" \"[\" \"]\" x)\n   (seq? x)     (html-collection \"seq\"    \"(\" \")\" x)\n   :else        (literal \"literal\" x)))\n\n(defn html-edn [e]\n  (binding [*key-counter* (atom 0)]\n    (sab/html [:div.com-rigsomelight-rendered-edn.com-rigsomelight-devcards-typog\n               {:key \"devcards-edn-block\"} (html e)])))\n"]}