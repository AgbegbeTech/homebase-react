{"version":3,"sources":["devcards/system.cljs"],"mappings":"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","names":["devcards.system/l","x","js/console","devcards.system/devcards-app-element-id","devcards.system/devcards-rendered-card-class","devcards.system/prevent->","f","e","devcards.system/get-element-by-id","id","js/document","devcards.system/devcards-app-node","devcards.system/path->unique-card-id","path","clojure.string.join","cljs.core.map","cljs.core/name","cljs.core/cons","devcards.system/create-element*","tag","style-text","el","js/document.createElement","js/document.createTextNode","devcards.system/create-style-element","cljs.core.partial","devcards.system/create-script-element","devcards.system/prepend-child","node","node2","temp__5733__auto__","first-child","devcards.system/add-css-if-necessary!","heads","head","devcards.system/render-base-if-necessary!","js/devcards","js/devcards.system","js/devcards.system.history","devcards.system/history","devcards.util.utils/html-env?","h","js/goog.History","devcards.system/path->token","devcards.system/token->path","token","cljs.core/vec","cljs.core/keyword","clojure.string/replace-first","clojure.string.split","devcards.system/hash-navigate","devcards.system/hash-routing-init","state-atom","p1__16602#","goog.events/listen","goog.history.EventType/NAVIGATE","cljs.core.swap_BANG_","devcards.system/set-current-path","temp__5735__auto__","goog.object/get","js/location","devcards.system/devcard?","d","and__4115__auto__","cljs.core/map?","devcards.system/path-collision","state","c","cljs.core.get","cljs.core.concat","cljs.core/butlast","cljs.core.keyword","cljs.core/last","devcards.system/register-collision","cljs.core.update_in","cljs.core/inc","js/devcards.system.dev-trans","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__16604","cljs.core/MultiFn","cljs.core.symbol","devcards.system/dev-trans","cljs.core/first","msg","p__16605","vec__16606","cljs.core.nth","map__16609","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","_","options","func","position","new-path","dc","devcards.system/devcard-initial-data","js/devcards.system.app-state","devcards.system/app-state","devcards.system/valid-path?","or__4126__auto__","cljs.core._EQ_","cljs.core.get_in","devcards.system/enforce-valid-path","p__16612","map__16613","devcards.system/add-to-current-path","current-path","cljs.core.assoc","cljs.core.conj","p__16615","map__16616","cljs.core.not_EQ_","devcards.system/set-current-path!","devcards.system/current-page","data","devcards.system/display-single-card?","devcards.system/display-dir-paths","cur","cljs.core.filter","cljs.core/complement","cljs.core.comp","cljs.core/second","devcards.system/display-cards","p1__16619#","cljs.core/not","devcards.system/*devcard-data*","p__16620","map__16621","devcards.system/card-template","card","G__16623","G__16624","G__16625","sablono.interpreter/interpret","sablono.core/create-element","*devcard-data*-orig-val__16626","*devcard-data*-temp-val__16627","devcards.system/render-cards","cards","cljs.core.sort_by","devcards.system/main-cards-template","cljs.core/deref","p__16628","map__16629","devcards.system/breadcrumbs","cpath","crumbs","cljs.core.juxt","cljs.core/rest","cljs.core.map_indexed","i","v","cljs.core.subvec","cljs.core.take","cljs.core/count","cljs.core.repeat","devcards.system/breadcrumbs-templ","counter","sep-fn","G__16631","G__16632","G__16633","G__16634","G__16635","G__16636","G__16637","cljs.core.interleave","cljs.core/iterate","p__16638","vec__16639","n","G__16642","G__16643","G__16644","G__16645","G__16646","G__16647","devcards.system/cljs-logo","devcards.system/navigate-to-path","key","s","new-s","devcards.system/dir-links","dirs","cljs.core/empty?","attrs16652","sablono.interpreter/attributes","sablono.normalize.merge_with_class","p__16655","vec__16656","child-tree","G__16659","G__16660","G__16661","G__16663","G__16664","G__16665","G__16662","G__16666","G__16667","G__16668","G__16669","p__16672","vec__16673","devcards.system/main-template","G__16686","G__16687","G__16688","attrs16683","attrs16684","attrs16685","clojure.string/replace","dir-paths","ctor__16459__auto__","props__16456__auto__","this__16457__auto__","devcards.util.utils/react-holder","js/goog.inherits","x16693","devcards.system/DevcardsRoot","this","cljs.core/add-watch","devcards.system/renderer","js/module$node_modules$react_dom$index.render","js/module$node_modules$react$index.createElement","devcards.system/merge-in-new-data","new-state","cljs.core.merge","devcards.system/off-the-books","channel","start-data","first-message","initial-data","cljs.core.dissoc","c__10818__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__10819__auto__","switch__10757__auto__","state_16748","state_val_16749","inst_16744","statearr-16750","inst_16701","inst_16702","statearr-16751","statearr-16752","inst_16709","statearr-16753","statearr-16754","statearr-16755","statearr-16756","inst_16739","statearr-16757","statearr-16758","inst_16746","cljs.core.async.impl.ioc-helpers/return-chan","statearr-16759","inst_16704","inst_16705","cljs.core/PersistentVector","inst_16706","inst_16707","statearr-16761","cljs.core.async/ioc-alts!","inst_16727","statearr-16767","inst_16718","inst_16725","statearr-16768","statearr-16769","inst_16717","inst_16719","inst_16720","inst_16721","statearr-16770","statearr-16771","statearr-16772","inst_16730","inst_16731","inst_16732","inst_16733","statearr-16773","statearr-16774","inst_16737","statearr-16775","inst_16741","statearr-16776","inst_16723","statearr-16798","statearr-16799","state-machine__10758__auto__","ret-value__10759__auto__","result__10760__auto__","cljs.core/keyword-identical?","ex__10761__auto__","e16800","statearr-16801","cljs.core/seq","statearr-16802","state__10820__auto__","statearr-16803","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","devcards.system/load-data-from-channel!","state_16811","state_val_16812","inst_16804","inst_16805","inst_16806","cljs.core.async.impl.ioc-helpers/take!","inst_16808","inst_16809","statearr-16813","e16814","statearr-16815","statearr-16816","statearr-16817","cljs.core/reset!","devcards.system/start-ui-with-renderer","renderer","js/devcards.system.devcards-ui-setup","devcards.system/devcards-ui-setup","js/js","js/js.module$node_modules$react$index","js/js.module$node_modules$react$index.initializeTouchEvents","js/module$node_modules$react$index.initializeTouchEvents","state_16851","state_val_16852","statearr-16853","inst_16824","inst_16849","inst_16833","inst_16837","inst_16838","inst_16826","inst_16827","inst_16828","inst_16829","inst_16830","statearr-16866","statearr-16867","inst_16840","inst_16841","inst_16842","statearr-16868","statearr-16869","statearr-16870","statearr-16871","statearr-16872","inst_16847","statearr-16873","statearr-16874","e16875","statearr-16876","statearr-16877","statearr-16878","js/setTimeout","devcards.system/start-ui","state_16903","state_val_16904","statearr-16905","inst_16879","inst_16901","inst_16888","inst_16890","inst_16891","inst_16881","inst_16882","inst_16883","inst_16884","inst_16885","statearr-16906","statearr-16907","inst_16893","inst_16894","inst_16895","statearr-16908","statearr-16909","statearr-16910","statearr-16911","statearr-16912","inst_16899","statearr-16913","statearr-16914","e16916","statearr-16917","statearr-16918","statearr-16919","devcards.system/cljs-logo-svg"],"sourcesContent":["(ns devcards.system\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [put! <! chan timeout]]\n   [sablono.core :as sab]\n   [devcards.util.edn-renderer :as edn-rend]\n   [goog.object :as gobj]\n   [goog.events :as events]\n   [goog.history.EventType :as EventType]\n   [devcards.util.utils :as utils :refer-macros [define-react-class]]\n   [react :as react]\n   [react-dom :as react-dom])\n  (:require-macros\n   [cljs.core.async.macros :refer [go go-loop]]\n   [devcards.system :refer [inline-resouce-file]])\n  (:import\n   [goog History]))\n\n(defn l [x]\n  (.log js/console x)\n  x)\n\n(def devcards-app-element-id \"com-rigsomelight-devcards-main\")\n\n(def devcards-rendered-card-class \"com-rigsomelight-devcards_rendered-card\")\n\n(defn prevent-> [f] (fn [e] (.preventDefault e) (f e)))\n\n(defn get-element-by-id [id] (.getElementById js/document id))\n\n(defn devcards-app-node [] (get-element-by-id devcards-app-element-id))\n\n(defn path->unique-card-id [path]\n  (string/join \".\" (map (fn [x] (str \"[\" x \"]\"))\n                        (map name (cons :cardpath path)))))\n\n#_(defn unique-card-id->path [card-id]\n  (mapv keyword\n       (-> (subs card-id 1\n                 (dec (count card-id)))\n           (string/split #\"\\].\\[\")\n           rest)))\n\n(defn create-element* [tag id style-text]\n  (let [el (js/document.createElement tag)]\n    (set! (.-id el) id)\n    (.appendChild el (js/document.createTextNode style-text))\n    el))\n\n(def create-style-element (partial create-element* \"style\"))\n(def create-script-element (partial create-element* \"script\"))\n\n(defn prepend-child [node node2]\n  (if-let [first-child (.-firstChild node)]\n    (.insertBefore node node2 first-child)\n    (.appendChild node node2)))\n\n(defn add-css-if-necessary! []\n  (if-let [heads (.getElementsByTagName js/document \"head\")]\n    (let [head (aget heads 0)]\n      (when-not (get-element-by-id \"com-rigsomelight-code-highlight-css\")\n        (.appendChild head\n                      (create-style-element \"com-rigsomelight-code-highlight-css\"\n                                            (inline-resouce-file \"public/devcards/css/com_rigsomelight_github_highlight.css\"))))\n\n      (when-not (get-element-by-id \"com-rigsomelight-devcards-css\")\n        (.appendChild head (create-style-element \"com-rigsomelight-devcards-css\"\n                                                 (inline-resouce-file \"public/devcards/css/com_rigsomelight_devcards.css\"))))\n      (when-not (get-element-by-id \"com-rigsomelight-devcards-addons-css\")\n        (.appendChild head (create-style-element \"com-rigsomelight-devcards-addons-css\"\n                                                 (inline-resouce-file \"public/devcards/css/com_rigsomelight_devcards_addons.css\"))))\n      (when-not (get-element-by-id \"com-rigsomelight-edn-css\")\n        (.appendChild head\n                      (create-style-element \"com-rigsomelight-edn-css\"\n                                            (inline-resouce-file \"public/devcards/css/com_rigsomelight_edn_flex.css\")))))))\n\n(defn render-base-if-necessary! []\n  (add-css-if-necessary!)\n  (when-not (devcards-app-node)\n    (let [el (js/document.createElement \"div\")]\n      (set! (.-id el) devcards-app-element-id)\n      (prepend-child (.-body js/document) el))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Hashbang routing\n\n(declare set-current-path history)\n\n(defonce history\n  (when (utils/html-env?)\n    (let [h (History.)]\n      (.setEnabled h true)\n      h)))\n\n(defn path->token [path]\n  (str \"!/\" (string/join \"/\" (map name path))))\n\n(defn token->path [token]\n  (vec (map keyword\n            (-> token\n              (string/replace-first #\"#\" \"\")\n              (string/replace-first #\"!/\" \"\")\n              (string/split #\"/\")))))\n\n#_(prn (token->path (.getToken history)))\n\n#_(prn (token->path (gobj/get js/location \"hash\")))\n\n(defn hash-navigate [path]\n  (.setToken history (path->token path)))\n\n(defn hash-routing-init [state-atom]\n  (events/listen history EventType/NAVIGATE\n                 #(swap! state-atom set-current-path (token->path (.-token %))))\n  ;; we should probably just get the location and parse this out to\n  ;; avoid the initial race condition where .getToken isn't populated\n  (when-let [token (gobj/get js/location \"hash\")]\n    (swap! state-atom set-current-path (token->path token))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn devcard? [d]\n  (and (map? d)\n       #_(:data-atom d)\n       (:func d)\n       (:path d)\n       (:position d)\n       d))\n\n(defn path-collision [state path]\n  (if-let [c (get (:path-collision-count state) path)]\n    (vec (concat (butlast (vec path))\n                 [(keyword (str (name (last path)) \"-\" c))]))\n    path))\n\n(defn register-collision [state path]\n  (update-in state [:path-collision-count path] inc))\n\n(defmulti dev-trans first)\n\n(defmethod dev-trans :default [msg state] state)\n\n(defmethod dev-trans :register-card [[_ {:keys [path options func]}] state]\n  (let [position (:position state)\n        new-path (path-collision state path)]\n    (-> state\n        (update-in [:position] inc)\n        (update-in (cons :cards new-path)\n                   (fn [dc]\n                     { :path new-path\n                       :func func\n                       :position position }))\n        (register-collision path))))\n\n(def devcard-initial-data { :current-path []\n                            :position 0\n                            :cards {}\n                            :path-collision-count {}\n                            :base-card-options { :frame true\n                                                 :heading true\n                                                 :padding true\n                                                 :hidden false\n                                                 :inspect-data false\n                                                 :watch-atom true\n                                                 :history false } })\n\n(defonce app-state (atom devcard-initial-data))\n\n(defn valid-path? [state path]\n  (or (= [] path)\n      (get-in (:cards state) path)))\n\n(defn enforce-valid-path [state path]\n  (vec (if (valid-path? state path) path [])))\n\n(defn add-to-current-path [{:keys [current-path] :as state} path]\n  (assoc state\n         :current-path\n         (enforce-valid-path state (conj current-path (keyword path)))))\n\n(defn set-current-path [{:keys [current-path] :as state} path]\n  (let [path (vec (map keyword path))]\n    (if (not= current-path path)\n      (-> state\n        (assoc :current-path (enforce-valid-path state path))\n        #_add-navigate-effect)\n      state)))\n\n(defn set-current-path! [state-atom path]\n  (swap! state-atom set-current-path path)\n  (hash-navigate path))\n\n(defn current-page [data]\n  (and (:current-path data)\n       (:cards data)\n       (get-in (:cards data) (:current-path data))))\n\n(defn display-single-card? [state]\n  (devcard? (current-page state)))\n\n(defn display-dir-paths [state]\n  (let [cur (current-page state)]\n    (filter (complement (comp devcard? second)) cur)))\n\n(defn display-cards [cur]\n  (filter (comp #(and (not (:delete-card %))\n                      (devcard? %)) second) cur))\n\n(def ^:dynamic *devcard-data* nil)\n\n(defn card-template [state-atom {:keys [path options func] :as card}]\n  (sab/html\n   [:div.com-rigsomelight-devcard {:key (path->unique-card-id path)}\n    (cljs.core/binding [*devcard-data* card]\n      (func))]))\n\n(defn render-cards [cards state-atom]\n  (map (comp (partial card-template state-atom) second)\n       (sort-by (comp :position second) cards)))\n\n(defn main-cards-template [state-atom]\n  (let [data @state-atom]\n    (if (display-single-card? data)\n      (card-template state-atom (current-page data))\n      (render-cards (display-cards (current-page data)) state-atom))))\n\n(defn breadcrumbs [{:keys [current-path] :as state}]\n  (let [cpath (map name (cons :devcards current-path))\n        crumbs\n        (map (juxt last rest)\n             (rest (map-indexed\n                    (fn [i v] (subvec v 0 i))\n                    (take (inc (count cpath))\n                          (repeat (vec cpath))))))]\n    crumbs))\n\n(declare cljs-logo)\n\n(defn breadcrumbs-templ [crumbs state-atom]\n  (let [counter (atom 0)\n        sep-fn (fn [_] (sab/html [:span.com-rigsomelight-devcards-breadcrumb-sep\n                                 {:key (do (swap! counter inc) @counter)}\n                                 \"/\"]))]\n    (sab/html\n     [:div.com-rigsomelight-devcards-card-base.com-rigsomelight-devcards-breadcrumbs.com-rigsomelight-devcards-typog\n      {:key \"breadcrumbs-templ\"}\n      (rest\n       (interleave\n        (iterate sep-fn (sep-fn nil))\n       (map (fn [[n path]]\n              (sab/html\n               [:span {:style {:display \"inline-block\" }\n                       :key (path->unique-card-id path)}\n                [:a.com-rigsomelight-devcards_set-current-path\n                 {:href \"#\"\n                  :onClick      (prevent-> #(set-current-path! state-atom path))}\n                 (str n)]]))\n            crumbs)))\n      (cljs-logo)])))\n\n(defn navigate-to-path [key state-atom]\n  (swap! state-atom\n         (fn [s]\n           (let [new-s (add-to-current-path s key)]\n             (hash-navigate (:current-path new-s))\n             new-s))))\n\n(defn dir-links [dirs state-atom]\n  (when-not (empty? dirs)\n    (sab/html\n     [:div.com-rigsomelight-devcards-list-group.com-rigsomelight-devcards-typog\n      (map (fn [[key child-tree]]\n             (sab/html\n              [:a.com-rigsomelight-devcards-list-group-item\n               {:href \"#\"\n                :key (str key)\n                :onClick\n                (prevent->\n                 (fn [e] (navigate-to-path key state-atom)))\n                #_:onTouchStart\n                #_(prevent->\n                 (fn [e] (navigate-to-path key state-atom)))}\n               [:span.com-rigsomelight-devcards-badge\n                {:style {:float \"right\"}}\n                (count child-tree)]\n               [:span \" \" (name key)]]))\n           (sort-by (fn [[key _]] (name key))  dirs))])))\n\n(defn main-template [state-atom]\n  (let [data @state-atom]\n    (sab/html\n     [:div\n      {:className\n       (str \"com-rigsomelight-devcards-base \"\n            (when-let [n (first (:current-path data))]\n              (string/replace (name n) \".\" \"-\")))}\n      #_[:div.com-rigsomelight-devcards-navbar\n       [:div.com-rigsomelight-devcards-container\n        [:span.com-rigsomelight-devcards-brand\n         \"(:devcards ClojureScript)\"]]]\n      [:div.com-rigsomelight-devcards-container\n       (when-let [crumbs (breadcrumbs data)]\n         (breadcrumbs-templ crumbs state-atom))\n       (when-not (display-single-card? data)\n         (let [dir-paths (display-dir-paths data)]\n           (dir-links dir-paths state-atom)))\n       [:div\n        (main-cards-template state-atom)]]])))\n\n(define-react-class DevcardsRoot\n  (componentDidMount\n   [this]\n   (add-watch app-state :renderer-watch (fn [_ _ _ _] (.forceUpdate this))))\n  (render [this] (main-template app-state)))\n\n(defn renderer [state-atom]\n  #_(prn \"Rendering\")\n  (react-dom/render\n   (react/createElement DevcardsRoot)\n   #_(sab/html [:div\n              (main-template state-atom)\n              #_(edn-rend/html-edn @state-atom)])\n   (devcards-app-node)))\n\n(comment\n\n\n  a debug option :debug-card true\n\n  when initial state changes we should reset the state\n\n  an iterator to delinate a card in many states\n\n  speed test pprint and hightlighting versus edn-renderer\n\n  use a pure component for the edn renderer to memoize rerenders\n\n  look at upndown.js and marked.js\n\n  probably switch to marked for markdown parsing\n\n  fix loading race\n\n  move highlighting out and force folks to require hljs if they want it?\n\n  generate blog posts from a namespace with devcards\n  - can implement code modules\n  - look at dev mode and prod mode for this\n  - front matter in ns meta data\n\n  fix style of history so that there is no margin under it\n    when there is no data being inspected\n\n  move documentation cards into more descriptive namespaces\n  fill out details better\n\n  look at being able to render cursors\n\n  BACKBURNER\n  make slider component\n  consider web-components for hiding css styling!!!\n  turn system into react component?\n\n  )\n\n(defn merge-in-new-data [state new-state]\n  (assoc state\n         :path-collision-count {}\n         :position (:position new-state)\n         :cards    (merge\n                    (:cards state)\n                    (:cards new-state))))\n\n;; the only major potential problem here is that If we only register\n;; some of the cards of a namespace then the other cards in the\n;; namespace will dissapear. If one is doing calculations at the top\n;; level that take more than the wait time this could be a problem\n(defn off-the-books\n  \"Run sequential messages off the books outside of the atom and\n   then difference the result so we can only display the new cards\n   that have arrived. This prevents multiple renders and allows us\n   to delete cards live.\"\n  [channel start-data first-message]\n  (let [;timer (timeout 3000)\n        initial-data (-> start-data\n                       (assoc :path-collision-count {})\n                       (dissoc :cards))]\n    #_(prn \"off the books\")\n    (go-loop [data (dev-trans first-message initial-data)]\n      #_(prn \"here\")\n      (let [timer (timeout 500)] ;; needs to be longer for mobile think\n        (when-let [[[msg-name payload] ch] (alts! [channel timer])]\n          (cond\n            (= ch timer)           (merge-in-new-data start-data data)\n            ;; this will function without jsreload. but allows us to\n            ;; render a tick faster\n            (= msg-name :jsreload) (merge-in-new-data start-data data)\n            :else\n            (do\n              (recur (dev-trans [msg-name payload] data)))))))))\n\n(defn load-data-from-channel! [channel]\n  (go (let [new-state (<! (off-the-books channel @app-state []))]\n        (reset! app-state new-state))))\n\n(defn start-ui-with-renderer [channel renderer]\n  (defonce devcards-ui-setup\n    (do\n      (when (exists? react/initializeTouchEvents)\n        (react/initializeTouchEvents true))\n      (go\n        (<! (load-data-from-channel! channel))\n\n        (js/setTimeout #(renderer app-state) 0)\n\n        (js/setTimeout #(add-watch app-state :devcards-render\n                                   (fn [_ _ _ _] (renderer app-state))) 0)\n\n        (loop  []\n          (when-let [v (<! channel)]\n            #_(prn \"hey\" (first v))\n            (let [new-state (<! (off-the-books channel @app-state v))]\n              #_(prn \"in the books\")\n              (js/setTimeout #(reset! app-state new-state) 0))\n            (recur))))\n      true)))\n\n\n(defn start-ui [channel]\n  (defonce devcards-ui-setup\n    (do\n      (when (exists? react/initializeTouchEvents)\n        (react/initializeTouchEvents true))\n      (render-base-if-necessary!)\n      (go\n        ;; initial load\n        #_(prn \"INITIAL loading\")\n        ;; consume all register card messages\n        ;; and then load the accumulated state into the\n        ;; app-state\n        (<! (load-data-from-channel! channel))\n\n        #_(let [new-state (<! (off-the-books channel @app-state []))]\n          (reset! app-state new-state))\n\n        ;; escape core async context for better errors\n        (js/setTimeout #(renderer app-state) 0)\n\n        #_(js/setTimeout #(add-watch app-state :devcards-render\n                                   (fn [_ _ _ _] (renderer app-state))) 0)\n\n        (js/setTimeout #(hash-routing-init app-state) 0)\n\n        (loop  []\n          (when-let [v (<! channel)]\n            #_(prn \"hey\" (first v))\n            (let [new-state (<! (off-the-books channel @app-state v))]\n              #_(prn \"in the books\")\n              (js/setTimeout #(reset! app-state new-state) 0))\n            (recur))))\n      true)))\n\n(def cljs-logo-svg\n  \"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>\n<svg class='cljs-logo' width='49px' height='49px' style='float: right; display: inline-block; position:relative; top:-13px; right: 0px;' version='1.1'\n  xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px'\n  viewBox='0 0 428 428' enable-background='new 0 0 428 428' xml:space='preserve'>\n<circle fill='#fff' cx='213' cy='214' r='213' />\n<g>\n<path fill='#96CA4B' d='M122,266.6c-12.7,0-22.3-3.7-28.9-11.1c-6.6-7.4-9.9-18-9.9-31.8c0-14.1,3.4-24.9,10.3-32.5\n  s16.8-11.4,29.9-11.4c8.8,0,16.8,1.6,23.8,4.9l-5.4,14.3c-7.5-2.9-13.7-4.4-18.6-4.4c-14.5,0-21.7,9.6-21.7,28.8\n  c0,9.4,1.8,16.4,5.4,21.2c3.6,4.7,8.9,7.1,15.9,7.1c7.9,0,15.4-2,22.5-5.9v15.5c-3.2,1.9-6.6,3.2-10.2,4\n  C131.5,266.2,127.1,266.6,122,266.6z'/>\n<path fill='#96CA4B' d='M194.4,265.1h-17.8V147.3h17.8V265.1z'/>\n<path fill='#5F7FBF' d='M222.9,302.3c-5.3,0-9.8-0.6-13.3-1.9v-14.1c3.4,0.9,6.9,1.4,10.5,1.4c7.6,0,11.4-4.3,11.4-12.9v-93.5h17.8\n  v94.7c0,8.6-2.3,15.2-6.8,19.6C237.9,300.1,231.4,302.3,222.9,302.3z M230.4,159.2c0-3.2,0.9-5.6,2.6-7.3c1.7-1.7,4.2-2.6,7.5-2.6\n  c3.1,0,5.6,0.9,7.3,2.6c1.7,1.7,2.6,4.2,2.6,7.3c0,3-0.9,5.4-2.6,7.2c-1.7,1.7-4.2,2.6-7.3,2.6c-3.2,0-5.7-0.9-7.5-2.6\n  C231.2,164.6,230.4,162.2,230.4,159.2z'/>\n<path fill='#5F7FBF' d='M342.5,241.3c0,8.2-3,14.4-8.9,18.8c-6,4.4-14.5,6.5-25.6,6.5c-11.2,0-20.1-1.7-26.9-5.1v-15.4\n  c9.8,4.5,19,6.8,27.5,6.8c10.9,0,16.4-3.3,16.4-9.9c0-2.1-0.6-3.9-1.8-5.3c-1.2-1.4-3.2-2.9-6-4.4c-2.8-1.5-6.6-3.2-11.6-5.1\n  c-9.6-3.7-16.2-7.5-19.6-11.2c-3.4-3.7-5.1-8.6-5.1-14.5c0-7.2,2.9-12.7,8.7-16.7c5.8-4,13.6-5.9,23.6-5.9c9.8,0,19.1,2,27.9,6\n  l-5.8,13.4c-9-3.7-16.6-5.6-22.8-5.6c-9.4,0-14.1,2.7-14.1,8c0,2.6,1.2,4.8,3.7,6.7c2.4,1.8,7.8,4.3,16,7.5\n  c6.9,2.7,11.9,5.1,15.1,7.3c3.1,2.2,5.4,4.8,7,7.7C341.7,233.7,342.5,237.2,342.5,241.3z'/>\n</g>\n<path fill='#96CA4B' stroke='#96CA4B' stroke-width='6' stroke-miterlimit='10' d='M197,392.7c-91.2-8.1-163-85-163-178.3\n  S105.8,44.3,197,36.2V16.1c-102.3,8.2-183,94-183,198.4s80.7,190.2,183,198.4V392.7z'/>\n<path fill='#5F7FBF' stroke='#5F7FBF' stroke-width='6' stroke-miterlimit='10' d='M229,16.1v20.1c91.2,8.1,163,85,163,178.3\n  s-71.8,170.2-163,178.3v20.1c102.3-8.2,183-94,183-198.4S331.3,24.3,229,16.1z'/>\n</svg>\")\n\n(defn cljs-logo []\n  (react/createElement \"span\"\n    #js {:key \"cljs-logo\"\n         :dangerouslySetInnerHTML\n         #js {:__html cljs-logo-svg}}))\n"]}